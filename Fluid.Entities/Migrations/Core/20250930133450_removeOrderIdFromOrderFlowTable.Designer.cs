// <auto-generated />
using System;
using Fluid.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fluid.Entities.Migrations.Core
{
    [DbContext(typeof(FluidDbContext))]
    [Migration("20250930133450_removeOrderIdFromOrderFlowTable")]
    partial class removeOrderIdFromOrderFlowTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fluid.Entities.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("action");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<int>("RecordId")
                        .HasColumnType("integer")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("table_name");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProcessedOrders")
                        .HasColumnType("integer")
                        .HasColumnName("processed_orders");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer")
                        .HasColumnName("total_orders");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_batches");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_batches_project_id");

                    b.ToTable("batches", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("blob_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<string>("SearchableBlobName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("searchable_blob_name");

                    b.Property<string>("SearchableText")
                        .HasColumnType("text")
                        .HasColumnName("searchable_text");

                    b.Property<string>("SearchableUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("searchable_url");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_documents_order_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.FieldMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("InputField")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("input_field");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("SchemaFieldId")
                        .HasColumnType("integer")
                        .HasColumnName("schema_field_id");

                    b.Property<int>("SchemaId")
                        .HasColumnType("integer")
                        .HasColumnName("schema_id");

                    b.Property<string>("Transformation")
                        .HasColumnType("text")
                        .HasColumnName("transformation");

                    b.HasKey("Id")
                        .HasName("pk_field_mappings");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_field_mappings_project_id");

                    b.HasIndex("SchemaFieldId")
                        .HasDatabaseName("ix_field_mappings_schema_field_id");

                    b.HasIndex("SchemaId")
                        .HasDatabaseName("ix_field_mappings_schema_id");

                    b.ToTable("field_mappings", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_to");

                    b.Property<int>("BatchId")
                        .HasColumnType("integer")
                        .HasColumnName("batch_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("order_status_id");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ValidationErrors")
                        .HasColumnType("jsonb")
                        .HasColumnName("validation_errors");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("BatchId")
                        .HasDatabaseName("ix_orders_batch_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_orders_project_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.OrderData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,4)")
                        .HasColumnName("confidence_score");

                    b.Property<string>("Coordinates")
                        .HasColumnType("jsonb")
                        .HasColumnName("coordinates");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("MetaDataValue")
                        .HasColumnType("text")
                        .HasColumnName("meta_data_value");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<string>("ProcessedValue")
                        .HasColumnType("text")
                        .HasColumnName("processed_value");

                    b.Property<int>("SchemaFieldId")
                        .HasColumnType("integer")
                        .HasColumnName("schema_field_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("verified_by");

                    b.HasKey("Id")
                        .HasName("pk_order_data");

                    b.HasIndex("SchemaFieldId")
                        .HasDatabaseName("ix_order_data_schema_field_id");

                    b.HasIndex("OrderId", "SchemaFieldId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_data_order_id_schema_field_id");

                    b.ToTable("order_data", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.OrderFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("order_status_id");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_order_flows");

                    b.ToTable("order_flows", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_code");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.ProjectSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("SchemaId")
                        .HasColumnType("integer")
                        .HasColumnName("schema_id");

                    b.HasKey("Id")
                        .HasName("pk_project_schemas");

                    b.HasIndex("SchemaId")
                        .HasDatabaseName("ix_project_schemas_schema_id");

                    b.HasIndex("ProjectId", "SchemaId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_schemas_project_id_schema_id");

                    b.ToTable("project_schemas", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Schema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_schemas");

                    b.ToTable("schemas", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.SchemaField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_type");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("FieldLabel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("field_label");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("field_name");

                    b.Property<string>("Format")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("format");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("integer")
                        .HasColumnName("max_length");

                    b.Property<int?>("MinLength")
                        .HasColumnType("integer")
                        .HasColumnName("min_length");

                    b.Property<int?>("Precision")
                        .HasColumnType("integer")
                        .HasColumnName("precision");

                    b.Property<int>("SchemaId")
                        .HasColumnType("integer")
                        .HasColumnName("schema_id");

                    b.HasKey("Id")
                        .HasName("pk_schema_fields");

                    b.HasIndex("SchemaId", "DisplayOrder")
                        .IsUnique()
                        .HasDatabaseName("ix_schema_fields_schema_id_display_order");

                    b.HasIndex("SchemaId", "FieldName")
                        .IsUnique()
                        .HasDatabaseName("ix_schema_fields_schema_id_field_name");

                    b.ToTable("schema_fields", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Batch", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Project", "Project")
                        .WithMany("Batches")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_batches_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Document", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Order", "Order")
                        .WithMany("Documents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.FieldMapping", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Project", "Project")
                        .WithMany("FieldMappings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_field_mappings_projects_project_id");

                    b.HasOne("Fluid.Entities.Entities.SchemaField", "SchemaField")
                        .WithMany("FieldMappings")
                        .HasForeignKey("SchemaFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_field_mappings_schema_fields_schema_field_id");

                    b.HasOne("Fluid.Entities.Entities.Schema", "Schema")
                        .WithMany("FieldMappings")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_field_mappings_schemas_schema_id");

                    b.Navigation("Project");

                    b.Navigation("Schema");

                    b.Navigation("SchemaField");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Order", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Batch", "Batch")
                        .WithMany("Orders")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_batches_batch_id");

                    b.HasOne("Fluid.Entities.Entities.Project", "Project")
                        .WithMany("Orders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_projects_project_id");

                    b.Navigation("Batch");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.OrderData", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Order", "Order")
                        .WithMany("OrderData")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_data_orders_order_id");

                    b.HasOne("Fluid.Entities.Entities.SchemaField", "SchemaField")
                        .WithMany("WorkItemData")
                        .HasForeignKey("SchemaFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_data_schema_fields_schema_field_id");

                    b.Navigation("Order");

                    b.Navigation("SchemaField");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.ProjectSchema", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Project", "Project")
                        .WithMany("ProjectSchemas")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_schemas_projects_project_id");

                    b.HasOne("Fluid.Entities.Entities.Schema", "Schema")
                        .WithMany("ProjectSchemas")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_schemas_schemas_schema_id");

                    b.Navigation("Project");

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.SchemaField", b =>
                {
                    b.HasOne("Fluid.Entities.Entities.Schema", "Schema")
                        .WithMany("SchemaFields")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schema_fields_schemas_schema_id");

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Batch", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Order", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("OrderData");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Project", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("FieldMappings");

                    b.Navigation("Orders");

                    b.Navigation("ProjectSchemas");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.Schema", b =>
                {
                    b.Navigation("FieldMappings");

                    b.Navigation("ProjectSchemas");

                    b.Navigation("SchemaFields");
                });

            modelBuilder.Entity("Fluid.Entities.Entities.SchemaField", b =>
                {
                    b.Navigation("FieldMappings");

                    b.Navigation("WorkItemData");
                });
#pragma warning restore 612, 618
        }
    }
}
