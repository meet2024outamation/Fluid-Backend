// <auto-generated />
using System;
using Fluid.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fluid.Entities.Migrations.IAM
{
    [DbContext(typeof(FluidIAMDbContext))]
    [Migration("20250918143008_changeUserRoleTable")]
    partial class changeUserRoleTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fluid.Entities.IAM.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsForServicePrincipal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_for_service_principal");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_roles_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_roles_modified_by_id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.IAM.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("id");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("connection_string");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("database_name");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_tenant");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_tenant_created_by");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_identifier");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_tenant_modified_by");

                    b.ToTable("tenant", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.IAM.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureAdId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("azure_ad_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AzureAdId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_azure_ad_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.IAM.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by_id");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("TenantId")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("tenant_id");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unique_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_roles_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_user_roles_modified_by_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_user_roles_tenant_id");

                    b.HasIndex("UserId", "RoleId", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id_role_id_tenant_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Fluid.Entities.IAM.Role", b =>
                {
                    b.HasOne("Fluid.Entities.IAM.User", "CreatedBy")
                        .WithMany("RoleCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_roles_users_created_by_id");

                    b.HasOne("Fluid.Entities.IAM.User", "ModifiedBy")
                        .WithMany("RoleModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_roles_users_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Fluid.Entities.IAM.Tenant", b =>
                {
                    b.HasOne("Fluid.Entities.IAM.User", "CreatedByUser")
                        .WithMany("CreatedTenants")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tenant_users_created_by");

                    b.HasOne("Fluid.Entities.IAM.User", "ModifiedByUser")
                        .WithMany("ModifiedTenants")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tenant_users_modified_by");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Fluid.Entities.IAM.UserRole", b =>
                {
                    b.HasOne("Fluid.Entities.IAM.User", "CreatedBy")
                        .WithMany("UserRoleCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_created_by_id");

                    b.HasOne("Fluid.Entities.IAM.User", "ModifiedBy")
                        .WithMany("UserRoleModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_modified_by_id");

                    b.HasOne("Fluid.Entities.IAM.Role", "Role")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Fluid.Entities.IAM.Tenant", "Tenant")
                        .WithMany("UserRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_roles_tenant_tenant_id");

                    b.HasOne("Fluid.Entities.IAM.User", "User")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fluid.Entities.IAM.Role", b =>
                {
                    b.Navigation("UserRoleUsers");
                });

            modelBuilder.Entity("Fluid.Entities.IAM.Tenant", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Fluid.Entities.IAM.User", b =>
                {
                    b.Navigation("CreatedTenants");

                    b.Navigation("ModifiedTenants");

                    b.Navigation("RoleCreatedBies");

                    b.Navigation("RoleModifiedBies");

                    b.Navigation("UserRoleCreatedBies");

                    b.Navigation("UserRoleModifiedBies");

                    b.Navigation("UserRoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
